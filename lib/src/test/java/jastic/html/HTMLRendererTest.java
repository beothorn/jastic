/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jastic.html;

import jastic.html.attributes.Charset;
import jastic.html.elements.Body;
import jastic.html.elements.Text;
import org.junit.jupiter.api.Test;

import java.util.Map;
import java.util.Stack;

import static jastic.JasticHTML.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

class HTMLRendererTest {

    HTMLRenderer r = new HTMLRenderer();

    @Test
    void renderOverwritten() {
        final HTMLRenderer stackRenderer = new HTMLRenderer() {

            @Override
            public String renderElementBody(final Map<String, Object> context, final Body body) {
                final Stack<DomElement> stack = (Stack<DomElement>) context.get("stack");
                return stack.peek().getTag() + super.renderElementBody(context, body);
            }

            @Override
            public String renderElementText(final Map<String, Object> context, final Text text) {
                final Stack<DomElement> stack = (Stack<DomElement>) context.get("stack");
                return stack.peek().getTag() + super.renderElementText(context, text);
            }
        };

        final String actual = stackRenderer.render(html(
                body(
                        text("Hello, World!")
                )
        ));
        assertEquals("""
                <html>
                html\t<body>
                body\t\tHello, World!
                \t</body>
                </html>""", actual);
    }

    @Test
    void renderTag() {
        final String actual = r.render(tag("test", text("foobar")));
        assertEquals("""
                <test>
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderManyElements() {
        final String actual = r.render(text("foobar"), text("baz"));
        assertEquals("foobar\nbaz", actual);
    }

    @Test
    void renderTagWithIdAndClass() {
        final String actual = r.render(tag("test", attributes(id("bar"), className("foo")), text("foobar")));
        assertEquals("""
                <test id="bar" class="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderTagWithName() {
        final String actual = r.render(tag("test", attributes(name("foo")), text("foobar")));
        assertEquals("""
                <test name="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderTagWithContent() {
        final String actual = r.render(tag("test", attributes(content("foo")), text("foobar")));
        assertEquals("""
                <test content="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderTagWithRelation() {
        final String actual = r.render(tag("test", attributes(rel("foo")), text("foobar")));
        assertEquals("""
                <test rel="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderTagWithType() {
        final String actual = r.render(tag("test", attributes(type("foo")), text("foobar")));
        assertEquals("""
                <test type="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderTagWithHRef() {
        final String actual = r.render(tag("test", attributes(href("foo")), text("foobar")));
        assertEquals("""
                <test href="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderTagWithSrc() {
        final String actual = r.render(tag("test", attributes(src("foo")), text("foobar")));
        assertEquals("""
                <test src="foo">
                \tfoobar
                </test>""", actual);
    }

    @Test
    void renderText() {
        final String actual = r.render(body(text("foobar")));
        assertEquals("""
                <body>
                \tfoobar
                </body>""", actual);
    }

    @Test
    void renderRawText() {
        final String actual = r.render(body(rawText("foobar<nonescaped/>")));
        assertEquals("""
                <body>
                \tfoobar<nonescaped/>
                </body>""", actual);
    }

    @Test
    void renderBody() {
        final String actual = r.render(body(text("foobar")));
        assertEquals("""
                <body>
                \tfoobar
                </body>""", actual);
    }

    @Test
    void renderHead() {
        final String actual = r.render(head());
        assertEquals("<head></head>", actual);
    }

    @Test
    void renderTitle() {
        final String actual = r.render(title(text("foo")));
        assertEquals("<title>\n\tfoo\n</title>", actual);
    }

    @Test
    void renderMetaCharset() {
        final String actual = r.render(meta(
                attributes(
                        charset(Charset.Name.UTF8)
                )
        ));
        assertEquals("<meta charset=\"UTF-8\" />", actual);
    }

    @Test
    void renderDiv() {
        final String actual = r.render(div(text("foobar")));
        assertEquals("""
                <div>
                \tfoobar
                </div>""", actual);
    }

    @Test
    void renderScript() {
        final String actual = r.render(script(text("foobar")));
        assertEquals("""
                <script>
                \tfoobar
                </script>""", actual);
    }

    @Test
    void renderA() {
        final String actual = r.render(a(text("foobar")));
        assertEquals("""
                <a>
                \tfoobar
                </a>""", actual);
    }

    @Test
    void renderP() {
        final String actual = r.render(p(text("foobar")));
        assertEquals("""
                <p>
                \tfoobar
                </p>""", actual);
    }

    @Test
    void renderSpan() {
        final String actual = r.render(span(text("foobar")));
        assertEquals("""
                <span>
                \tfoobar
                </span>""", actual);
    }

    @Test
    void renderH() {
        assertEquals("""
                <h1>
                \tfoobar
                </h1>""", r.render(h(1, text("foobar"))));

        assertEquals("""
                <h2>
                \tfoobar
                </h2>""", r.render(h(2, text("foobar"))));
    }

    @Test
    void renderNoScript() {
        final String actual = r.render(noScript(text("foobar")));
        assertEquals("""
                <noscript>
                \tfoobar
                </noscript>""", actual);
    }

    @Test
    void renderLineBreak() {
        final String actual = r.render(br());
        assertEquals("<br>", actual);
    }

    @Test
    void renderLink() {
        final String actual = r.render(link(attributes()));
        assertEquals("<link />", actual);
    }

    @Test
    void renderImg() {
        final String actual = r.render(img(attributes()));
        assertEquals("<img />", actual);
    }
}
